runcmd:
  - sudo useradd -r boundary
#  - adduser --system --group boundary || true
  - mkdir /opt/boundary
  - curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.24.7+k3s1 sh -
  - mkdir -p /home/ubuntu/.kube/
  - cp /etc/rancher/k3s/k3s.yaml /home/ubuntu/.kube/config
  - chown ubuntu:ubuntu /home/ubuntu/.kube/config
  - k3s completion bash > /etc/bash_completion.d/k3s
  - echo "export KUBECONFIG=/home/ubuntu/.kube/config" | tee -a /home/ubuntu/.bashrc
  - echo "alias k=\'kubectl\'" | tee -a /home/ubuntu/.bashrc
#  - sudo apt install jq -y 
  - sudo apt install gpg -y
  - sudo apt install unzip -y
  - sudo snap install docker
  - sudo snap install docker-compose
  - wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
  - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
  - wget https://releases.hashicorp.com/boundary-worker/0.12.1+hcp/boundary-worker_0.12.1+hcp_linux_arm64.zip
  - unzip boundary-worker_0.12.1+hcp_linux_arm64.zip
  - cp boundary-worker /usr/local/bin/boundary
  - git clone git@github.com:conor-mccullough/boundary-bootstrap.git /home/ubuntu
#  - bash /home/ubuntu/install.sh

#  - sudo apt update && sudo apt install boundary-enterprise
#  - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
#  - helm completion bash > /etc/bash_completion.d/helm
#  - runuser -l ubuntu -c "helm repo add hashicorp https://helm.releases.hashicorp.com"

#  - chown boundary:boundary /opt/boundary
#  - chown boundary:boundary /usr/local/bin/boundary
#  - kubectl completion bash > /etc/bash_completion.d/kubectl

# Using Ubuntu user because cloud-init runs through things in a weird order and setting this to boundary:boundary causes it to fail
# See https://git.launchpad.net/cloud-init/tree/config/cloud.cfg.tmpl for precedence (init > config)

# Just do it with the ubuntu user for now. Once it's containerized it'll be better.
# pull the github repo with the bootstrap script and run it after you've brought the files in.
# Eventually remove the write_files all together except for if they're needed.. Remember cloud-init is for provisioning, not config management.

write_files:
- path: /home/ubuntu/license.hclic
  content: |

  owner: 'ubuntu:ubuntu'
  permissions: '0400'
  defer: true
- path: /home/ubuntu/worker-conf.hcl
  content: |
    disable_mlock = true

    listener "tcp" {
      address = "worker"
      purpose = "proxy"
      tls_disable = true
    }

    worker {
      name = "worker"
      description = "A worker for a docker demo"
      address     = "worker"
      public_addr = "localhost:9202"
      controllers = ["boundary"]
    }

    kms "aead" {
      purpose = "worker-auth"
      aead_type = "aes-gcm"
      key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
      key_id = "global_worker-auth"
    }
  owner: 'ubuntu:ubuntu'
  permissions: '0400'
  defer: true
- path: /home/ubuntu/controller-conf.hcl
  content: |
    disable_mlock = true

    controller {
      name = "docker-controller"
      description = "A controller for a docker demo!"
      address = "boundary"
      database {
          url = "env://BOUNDARY_PG_URL"
      }
    }

    listener "tcp" {
      address = "0.0.0.0:9200"
      purpose = "api"
      tls_disable = true
      cors_enabled = true
      cors_allowed_origins = ["*"]
    }

    listener "tcp" {
      address = "boundary"
      purpose = "cluster"
      tls_disable = true
    }

    listener "tcp" {
      address = "0.0.0.0:9203"
      purpose = "ops"
      tls_disable = true
    }

    kms "aead" {
      purpose = "root"
      aead_type = "aes-gcm"
      key = "sP1fnF5Xz85RrXyELHFeZg9Ad2qt4Z4bgNHVGtD6ung="
      key_id = "global_root"
    }

    kms "aead" {
      purpose = "worker-auth"
      aead_type = "aes-gcm"
      key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
      key_id = "global_worker-auth"
    }

    kms "aead" {
      purpose = "recovery"
      aead_type = "aes-gcm"
      key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
      key_id = "global_recovery"
    }

    events {
      audit_enabled        = true
      observations_enabled = true
      sysevents_enabled    = true

      sink "stderr" {
        name        = "all-events"
        description = "All events sent to stderr"
        event_types = ["*"]
        format      = "cloudevents-json"
      }

      sink {
        name        = "controller-audit-sink"
        description = "Audit sent to a file"
        event_types = ["audit"]
        format      = "cloudevents-json"

        file {
          path      = "/logs"
          file_name = "controller.log"
      }

        audit_config {
          audit_filter_overrides {
            secret    = "encrypt"
            sensitive = "hmac-sha256"
          }
        }
      }
    }
  owner: 'ubuntu:ubuntu'
  permissions: '0400'
  defer: true
