runcmd:
  - curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.24.7+k3s1 sh -
  - mkdir -p /home/ubuntu/.kube/
  - cp /etc/rancher/k3s/k3s.yaml /home/ubuntu/.kube/config
  - chown ubuntu:ubuntu /home/ubuntu/.kube/config
  - k3s completion bash > /etc/bash_completion.d/k3s
  - echo "export KUBECONFIG=/home/ubuntu/.kube/config" | tee -a /home/ubuntu/.bashrc
  - echo "alias k=\'kubectl\'" | tee -a /home/ubuntu/.bashrc
  - sudo apt install jq -y 
  - sudo apt install gpg -y
  - sudo apt install unzip -y
  - sudo snap install docker
  - sudo snap install docker-compose
  - wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
  - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
  - wget https://releases.hashicorp.com/boundary-worker/0.12.1+hcp/boundary-worker_0.12.1+hcp_linux_arm64.zip
  - unzip boundary-worker_0.12.1+hcp_linux_arm64.zip
  - cp boundary-worker /usr/local/bin/boundary
  #- curl -L https://github.com/kubernetes/kompose/releases/download/v1.28.0/kompose-linux-amd64 -o kompose
  #- chmod +x kompose
  #- sudo mv ./kompose /usr/local/bin/kompose
#  - sudo apt update && sudo apt install boundary-enterprise
  - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  - helm completion bash > /etc/bash_completion.d/helm
  - runuser -l ubuntu -c "helm repo add hashicorp https://helm.releases.hashicorp.com"
  - adduser --system --group boundary || true
  - mkdir /opt/boundary
  - chown boundary:boundary /opt/boundary
  - chown boundary:boundary /usr/local/bin/boundary
#  - chown root:boundary /etc/boundary/controller.hcl
#  - chmod 0640 /etc/boundary/controller.hcl
#  - chown root:boundary /etc/boundary/worker.hcl
#  - chmod 0640 /etc/boundary/worker.hcl
  - kubectl completion bash > /etc/bash_completion.d/kubectl
#  - curl -sL "https://releases.hashicorp.com/vault-k8s/1.1.0/vault-k8s_1.1.0_linux_$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64).zip" | zcat > /usr/local/bin/vault-k8s
#  - chmod +x /usr/local/bin/vault-k8s

write_files:
- path: /home/ubuntu/vault-overrides.yaml
  content: |
    server:
      image:
        repository: hashicorp/vault-enterprise
        tag: 1.12.1-ent
      enterpriseLicense:
        secretName: vault-ent-license
      affinity: ""
      ha:
        enabled: true
        replicas: 1
        apiAddr: null
        clusterAddr: null
        raft:
          enabled: true
          setNodeId: true
    ui:
      enabled: true
      publishNotReadyAddresses: true
      activeVaultPodOnly: false
      serviceType: "LoadBalancer"
      serviceNodePort: null
      externalPort: 8200
      targetPort: 8200
  owner: 'ubuntu:ubuntu'
  permissions: '0400'
  defer: true
- path: /opt/boundary/worker-conf.hcl
  content: |
    disable_mlock = true

    listener "tcp" {
      address = "worker"
      purpose = "proxy"
      tls_disable = true
    }

    worker {
      name = "worker"
      description = "A worker for a docker demo"
      address     = "worker"
      public_addr = "localhost:9202"
      controllers = ["boundary"]
    }

    kms "aead" {
      purpose = "worker-auth"
      aead_type = "aes-gcm"
      key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
      key_id = "global_worker-auth"
    }
  owner: 'boundary:boundary'
  permissions: '0400'
  defer: true
- path: /home/ubuntu/controller-conf.hcl
  content: |
    disable_mlock = true

    controller {
      name = "docker-controller"
      description = "A controller for a docker demo!"
      address = "boundary"
      database {
          url = "env://BOUNDARY_PG_URL"
      }
    }

    listener "tcp" {
      address = "0.0.0.0:9200"
      purpose = "api"
      tls_disable = true
      cors_enabled = true
      cors_allowed_origins = ["*"]
    }

    listener "tcp" {
      address = "boundary"
      purpose = "cluster"
      tls_disable = true
    }

    listener "tcp" {
      address = "0.0.0.0:9203"
      purpose = "ops"
      tls_disable = true
    }

    kms "aead" {
      purpose = "root"
      aead_type = "aes-gcm"
      key = "sP1fnF5Xz85RrXyELHFeZg9Ad2qt4Z4bgNHVGtD6ung="
      key_id = "global_root"
    }

    kms "aead" {
      purpose = "worker-auth"
      aead_type = "aes-gcm"
      key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
      key_id = "global_worker-auth"
    }

    kms "aead" {
      purpose = "recovery"
      aead_type = "aes-gcm"
      key = "8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ="
      key_id = "global_recovery"
    }

    events {
      audit_enabled        = true
      observations_enabled = true
      sysevents_enabled    = true

      sink "stderr" {
        name        = "all-events"
        description = "All events sent to stderr"
        event_types = ["*"]
        format      = "cloudevents-json"
      }

      sink {
        name        = "controller-audit-sink"
        description = "Audit sent to a file"
        event_types = ["audit"]
        format      = "cloudevents-json"

        file {
          path      = "/logs"
          file_name = "controller.log"
      }

        audit_config {
          audit_filter_overrides {
            secret    = "encrypt"
            sensitive = "hmac-sha256"
          }
        }
      }
    }
  owner: 'boundary:boundary'
  permissions: '0400'
  defer: true